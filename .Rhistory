# Independent predictors
set.seed(1)
simul <- SimulateRegression(pk = c(5, 3), nu_within = 0)
print(simul)
plot(simul)
# Multivariate outcome
set.seed(1)
simul <- SimulateRegression(pk = c(5, 7, 3))
print(simul)
plot(simul)
# Univariate outcome
set.seed(1)
simul <- SimulateRegression(pk = c(5, 7, 3))
print(simul)
plot(simul)
set.seed(1)
simul <- SimulateRegression(pk = 15)
print(simul)
plot(simul)
# Multivariate outcome
set.seed(1)
simul <- SimulateRegression(pk = c(5, 7, 3))
print(simul)
plot(simul)
set.seed(1)
simul <- SimulateRegression(
pk = c(5, 5), nu_within = 0.5,
v_within = c(0.5, 1), v_sign = -1, continuous = TRUE, pd_strategy = "min_eigenvalue"
)
print(simul)
Heatmap(
mat = cor(simul$xdata),
col = c("navy", "white", "red"),
legend_range = c(-1, 1)
)
plot(simul)
# Binary outcome
set.seed(1)
simul <- SimulateRegression(pk = 20, family = "binomial")
print(simul)
table(simul$ydata[, 1])
# Categorical outcome
set.seed(1)
simul <- SimulateRegression(pk = 20, family = "multinomial")
print(simul)
apply(simul$ydata, 2, sum)
plot(simul)
set.seed(1)
simul <- SimulateRegression(pk = 20, family = "binomial")
print(simul)
table(simul$ydata[, 1])
plot(simul)
# Simulation of 3 components with high e.v.
set.seed(1)
simul <- SimulateComponents(pk = c(5, 3, 4), ev_xx = 0.4)
print(simul)
plot(simul)
plot(cumsum(simul$ev), ylim = c(0, 1), las = 1)
# Simulation of 3 components with moderate e.v.
set.seed(1)
simul <- SimulateComponents(pk = c(5, 3, 4), ev_xx = 0.25)
print(simul)
plot(simul)
plot(cumsum(simul$ev), ylim = c(0, 1), las = 1)
# Simulation of multiple components with low e.v.
pk <- sample(3:10, size = 5, replace = TRUE)
simul <- SimulateComponents(
pk = pk,
nu_within = 0.3, v_within = c(0.8, 0.5), v_sign = -1, ev_xx = 0.1
)
plot(simul)
plot(cumsum(simul$ev), ylim = c(0, 1), las = 1)
@export
# Simulation of random graph with 50 nodes
set.seed(1)
simul <- SimulateGraphical(n = 100, pk = 50, topology = "random", nu_within = 0.05)
print(simul)
plot(simul)
# Simulation of scale-free graph with 20 nodes
set.seed(1)
simul <- SimulateGraphical(n = 100, pk = 20, topology = "scale-free")
plot(simul)
# Simulation of random graph with 50 nodes
set.seed(1)
simul <- SimulateGraphical(n = 100, pk = 50, topology = "random", nu_within = 0.05)
print(simul)
plot(simul)
simul$theta
set.seed(1)
simul <- SimulateGraphical(n = 100, pk = 50, topology = "random", nu_within = 0.05)
simul
simul$theta
SimulateGraphical(n = 100, pk = 50, topology = "random", nu_within = 0.05)
simul <- SimulateGraphical(n = 100, pk = 50, topology = "random", nu_within = 0.05)
adjacency <- SimulateAdjacency(pk = 20, topology = "scale-free")
plot(adjacency)
library(devtools)
document()
library(fake)
# Simulation of random graph with 50 nodes
set.seed(1)
simul <- SimulateGraphical(n = 100, pk = 50, topology = "random", nu_within = 0.05)
print(simul)
plot(simul)
set.seed(1)
simul <- SimulateGraphical(n = 100, pk = 20, topology = "scale-free")
plot(simul)
# Extracting true precision/correlation matrices
set.seed(1)
simul <- SimulateGraphical(
n = 100, pk = 20,
topology = "scale-free", output_matrices = TRUE
)
str(simul)
# Simulation of multi-block data
set.seed(1)
pk <- c(20, 30)
simul <- SimulateGraphical(
n = 100, pk = pk,
pd_strategy = "min_eigenvalue"
)
mycor <- cor(simul$data)
Heatmap(mycor,
col = c("darkblue", "white", "firebrick3"),
legend_range = c(-1, 1), legend_length = 50,
legend = FALSE, axes = FALSE
)
for (i in 1:2) {
axis(side = i, at = c(0.5, pk[1] - 0.5), labels = NA)
axis(
side = i, at = mean(c(0.5, pk[1] - 0.5)),
labels = ifelse(i == 1, yes = "Group 1", no = "Group 2"),
tick = FALSE, cex.axis = 1.5
)
axis(side = i, at = c(pk[1] + 0.5, sum(pk) - 0.5), labels = NA)
axis(
side = i, at = mean(c(pk[1] + 0.5, sum(pk) - 0.5)),
labels = ifelse(i == 1, yes = "Group 2", no = "Group 1"),
tick = FALSE, cex.axis = 1.5
)
}
# User-defined function for graph simulation
CentralNode <- function(pk, hub = 1) {
theta <- matrix(0, nrow = sum(pk), ncol = sum(pk))
theta[hub, ] <- 1
theta[, hub] <- 1
diag(theta) <- 0
return(theta)
}
simul <- SimulateGraphical(n = 100, pk = 10, implementation = CentralNode)
plot(simul) # star
simul <- SimulateGraphical(n = 100, pk = 10, implementation = CentralNode, hub = 2)
plot(simul) # variable 2 is the central node
# User-defined adjacency matrix
mytheta <- matrix(c(
0, 1, 1, 0,
1, 0, 0, 0,
1, 0, 0, 1,
0, 0, 1, 0
), ncol = 4, byrow = TRUE)
simul <- SimulateGraphical(n = 100, theta = mytheta)
plot(simul)
# User-defined adjacency and block structure
simul <- SimulateGraphical(n = 100, theta = mytheta, pk = c(2, 2))
mycor <- cor(simul$data)
Heatmap(mycor,
col = c("darkblue", "white", "firebrick3"),
legend_range = c(-1, 1), legend_length = 50, legend = FALSE
)
@export
document()
library(fake)
MatchingArguments(
extra_args = list(scale = TRUE, lambda = 1),
FUN = sgPLS::sPLS
)
?mvrnorm
MatchingArguments(
extra_args = list(Sigma = 1, test = FALSE),
FUN = MASS::mvrnorm
)
styler::style_pkg()
document()
library(fake)
document()
library(fake)
document()
library(fake)
document()
library(fake)
?SimulateGraphical
styler::style_pkg()
document()
?SimulateComponents
document()
?SimulateComponents
?SimulateGraphical
?SimulateRegression
document()
build_manual()
library(fake)
?SimulateRegression
document()
?SimulateRegression
?MakePositiveDefinite
document()
?MakePositiveDefinite
document()
?MakePositiveDefinite
document()
?MakePositiveDefinite
# Simulation of a symmetric matrix
p <- 5
set.seed(1)
omega <- matrix(rnorm(p * p), ncol = p)
omega <- omega + t(omega)
diag(omega) <- 0
omega_pd <- MakePositiveDefinite(omega,
pd_strategy = "min_eigenvalue"
)
omega_pd
document()
?MakePositiveDefinite
document()
?MakePositiveDefinite
document()
?MakePositiveDefinite
document()
?MakePositiveDefinite
document()
?MakePositiveDefinite
document()
?MakePositiveDefinite
document()
?MakePositiveDefinite
document()
?MakePositiveDefinite
?SimulateAdjacency
?SimulateSymmetricMatrix
?SimulatePrecision
document()
?SimulateGraphical
document()
?SimulateGraphical
document()
?SimulateGraphical
styler::style_pkg()
document()
document()
?SimulateGraphical
document()
library(fake)
?SimulateGraphical
?SimulateGraphical
document()
?SimulateComponents
?SimulateGraphical
?SimulateRegression
?SimulateGraphical
document()
?SimulateGraphical
?SimulateRegression
?MakePositiveDefinite
?SimulateRegression
document()
?SimulateRegression
document()
library(fake)
document()
document()
?SimulateSymmetricMatrix
?GraphicalModel
?SimulateGraphical
?SimulateSymmetricMatrix
?SimulatePrecision
?MakePositiveDefinite
document()
?SimulatePrecision
adjacency <- SimulateAdjacency(pk = 20, topology = "scale-free")
plot(adjacency)
# Simulation of a random graph with block structure
adjacency <- SimulateAdjacency(
pk = rep(10, 3),
nu_within = 0.7, nu_between = 0.03
)
plot(adjacency)
adjacency <- SimulateAdjacency(
pk = rep(10, 3),
nu_within = 0.7, nu_between = 0
)
plot(adjacency)
adjacency <- SimulateAdjacency(
pk = rep(10, 3),
nu_within = 0.7, nu_between = 0.03
)
plot(adjacency)
CentralNode <- function(pk, hub = 1) {
theta <- matrix(0, nrow = sum(pk), ncol = sum(pk))
theta[hub, ] <- 1
theta[, hub] <- 1
diag(theta) <- 0
return(theta)
}
simul <- SimulateAdjacency(pk = 10, implementation = CentralNode)
plot(simul) # star
simul <- SimulateAdjacency(pk = 10, implementation = CentralNode, hub = 2)
plot(simul) # variable 2 is the central node
?SimulateAdjacency
document()
library(fake)
?SimulateAdjacency
citation("huge")
document()
library(fake)
document()
library(fake)
?SimulateAdjacency
document()
library(fake)
?SimulateAdjacency
styler::style_pkg()
document()
library(fake)
?SimulateRegression
mat=matrix(c(1,1,1,2), ncol=2, byrow=TRUE)
mat
Contrast(mat)
# Example 1
mat=matrix(c(1,2,2,2), ncol=2, byrow=TRUE)
Contrast(mat)
# Example 1
mat=matrix(c(1,2,2,3), ncol=2, byrow=TRUE)
Contrast(mat)
# Example 1
mat=matrix(c(0.1,0.2,0.2,0.2), ncol=2, byrow=TRUE)
Contrast(mat)
# Example 2
mat=matrix(c(0.1,0.2,0.2,0.3), ncol=2, byrow=TRUE)
Contrast(mat)
styler::style_pkg()
document()
library(fake)
mat <- BlockMatrix(pk = c(2, 3))
mat
# Small example
mat <- BlockMatrix(pk = c(2, 3))
mat <- BlockMatrix(pk = c(2, 3, 2))
BlockMatrix(pk = c(2, 3, 2))
styler::style_pkg()
document()
mat <- BlockDiagonal(pk = c(2, 3))
mat
mat <- BlockDiagonal(pk = c(2, 3, 2))
mat
document()
?BlockMatrix
BlockDiagonal(pk = c(2, 3))
mat <- BlockMatrix(pk = c(2, 3))
mat
mat <- BlockStructure(pk = c(2,3))
mat
BlockMatrix(pk = c(2, 3))
BlockStructure(pk = c(2,3))
# Example 2
BlockMatrix(pk = c(2, 3, 2))
BlockStructure(pk = c(2, 3, 2))
document()
BlockDiagonal(pk = c(2, 3, 2))
BlockDiagonal(pk = c(2, 3))
# Example 1
BlockMatrix(pk = c(2, 3))
# Example 2
BlockMatrix(pk = c(2, 3, 2))
styler::style_pkg()
document()
library(fake)
MatchingArguments(
extra_args = list(Sigma = 1, test = FALSE),
FUN = MASS::mvrnorm
)
?SimulateComponents
# Simulation of 3 components with high e.v.
set.seed(1)
simul <- SimulateComponents(pk = c(5, 3, 4), ev_xx = 0.4)
print(simul)
plot(simul)
plot(cumsum(simul$ev), ylim = c(0, 1), las = 1)
plot(simul)
plot(cumsum(simul$ev), ylim = c(0, 1), las = 1)
# Simulation of 3 components with moderate e.v.
set.seed(1)
simul <- SimulateComponents(pk = c(5, 3, 4), ev_xx = 0.25)
print(simul)
plot(simul)
plot(cumsum(simul$ev), ylim = c(0, 1), las = 1)
pk <- sample(3:10, size = 5, replace = TRUE)
simul <- SimulateComponents(
pk = pk,
nu_within = 0.3, v_within = c(0.8, 0.5), v_sign = -1, ev_xx = 0.1
)
plot(simul)
plot(cumsum(simul$ev), ylim = c(0, 1), las = 1)
styler::style_pkg()
document()
library(fake)
styler::style_pkg()
document()
library(fake)
styler::style_pkg()
document()
library(fake)
?SimulateRegression
document()
library(fake)
?SimulateRegression
document()
library(fake)
?SimulateRegression
library(fake)
build_manual()
?use_github_action_check_standard
use_github_action_check_standard()
?isSymmetric
document()
styler::style_pkg()
document()
library(fake)
?Adjacen
?SimulateAdjacency
# Simulation of a scale-free graph with 20 nodes
adjacency <- SimulateAdjacency(pk = 20, topology = "scale-free")
plot(adjacency)
isSymmetric(adjacency)
?isSymmetric
library(fake)
isSymmetric(adjacency)
?as.matrix
adjacency
adjacency+1
adjacency
unclass(adjacency)
isSymmetric(unclass(adjacency))
styler::style_pkg()
document()
library(fake)
adjacency
isSymmetric(adjacency)
#' @export
isSymmetric.adjacency_matrix <- function(object, ...) {
object <- unclass(object)
UseMethod("isSymmetric")
}
isSymmetric(adjacency)
object
unclass(adjacency)
as.matrix(unclass(adjacency))
load_al
load_all()
rm(list = c("isSymmetric.adjacency_matrix"))
load_all()
?SimulateAdjacency
# Simulation of a scale-free graph with 20 nodes
adjacency <- SimulateAdjacency(pk = 20, topology = "scale-free")
plot(adjacency)
isSymmetric(adjacency)
#' @export
isSymmetric.adjacency_matrix <- function(object, ...) {
object <- as.matrix(unclass(object))
UseMethod("isSymmetric")
}
isSymmetric(adjacency)
isSymmetric(unclass(adjacency))
styler::style_pkg()
document()
document()
library(fake)
document()
library(fake)
styler::style_pkg()
document()
library(fake)
install.packages("revdepcheck")
devtools::release()
spell_check()
get_wordlist("fake")
spelling::get_wordlist()
spelling::get_wordlist("fake")
getwd()
spelling::get_wordlist(""/Users/barbara/Dropbox/R_packages/Simulations/fake"")
spelling::get_wordlist("/Users/barbara/Dropbox/R_packages/Simulations/fake")
spelling::update_wordlist("/Users/barbara/Dropbox/R_packages/Simulations/fake")
document()
library(fake)
spelling::update_wordlist("/Users/barbara/Dropbox/R_packages/Simulations/fake")
spelling::update_wordlist("/Users/barbara/Dropbox/R_packages/Simulations/fake")
check_sp
library(devtools)
check_sp
check_spell
spell_check()
devtools::release()
check_rhub()
document()
styler::style_pkg()
library(fake)
devtools::release()
check_win_devel()
devtools::release()
devtools::release()
11-4.8
5.5-2.4
5.5-2.4+5.5
