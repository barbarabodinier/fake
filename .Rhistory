document()
library(fake)
?SimulateRegression
document()
library(fake)
?SimulateRegression
library(fake)
build_manual()
?use_github_action_check_standard
use_github_action_check_standard()
?isSymmetric
document()
styler::style_pkg()
document()
library(fake)
?Adjacen
?SimulateAdjacency
# Simulation of a scale-free graph with 20 nodes
adjacency <- SimulateAdjacency(pk = 20, topology = "scale-free")
plot(adjacency)
isSymmetric(adjacency)
?isSymmetric
library(fake)
isSymmetric(adjacency)
?as.matrix
adjacency
adjacency+1
adjacency
unclass(adjacency)
isSymmetric(unclass(adjacency))
styler::style_pkg()
document()
library(fake)
adjacency
isSymmetric(adjacency)
#' @export
isSymmetric.adjacency_matrix <- function(object, ...) {
object <- unclass(object)
UseMethod("isSymmetric")
}
isSymmetric(adjacency)
object
unclass(adjacency)
as.matrix(unclass(adjacency))
load_al
load_all()
rm(list = c("isSymmetric.adjacency_matrix"))
load_all()
?SimulateAdjacency
# Simulation of a scale-free graph with 20 nodes
adjacency <- SimulateAdjacency(pk = 20, topology = "scale-free")
plot(adjacency)
isSymmetric(adjacency)
#' @export
isSymmetric.adjacency_matrix <- function(object, ...) {
object <- as.matrix(unclass(object))
UseMethod("isSymmetric")
}
isSymmetric(adjacency)
isSymmetric(unclass(adjacency))
styler::style_pkg()
document()
document()
library(fake)
document()
library(fake)
styler::style_pkg()
document()
library(fake)
install.packages("revdepcheck")
devtools::release()
spell_check()
get_wordlist("fake")
spelling::get_wordlist()
spelling::get_wordlist("fake")
getwd()
spelling::get_wordlist(""/Users/barbara/Dropbox/R_packages/Simulations/fake"")
spelling::get_wordlist("/Users/barbara/Dropbox/R_packages/Simulations/fake")
spelling::update_wordlist("/Users/barbara/Dropbox/R_packages/Simulations/fake")
document()
library(fake)
spelling::update_wordlist("/Users/barbara/Dropbox/R_packages/Simulations/fake")
spelling::update_wordlist("/Users/barbara/Dropbox/R_packages/Simulations/fake")
check_sp
library(devtools)
check_sp
check_spell
spell_check()
devtools::release()
check_rhub()
document()
styler::style_pkg()
library(fake)
devtools::release()
check_win_devel()
devtools::release()
devtools::release()
11-4.8
5.5-2.4
5.5-2.4+5.5
library(devtools)
library(fake)
document()
library(fake)
?SimulateClustering
## Not run:
## Example with 3 clusters
# Data simulation
set.seed(1)
simul <- SimulateClustering(
n = c(10, 30, 15), ev_xc = 0.95
)
simul$data
simul$theta
document()
library(fake)
simul$theta_xc
theta_xc=simul$theta_xc
theta_xc
class(theta_xc)
class(rbind(theta_xc))
class(as.vector(theta_xc))
class(as.vector(rbind(theta_xc)))
n=
n
n
n=c(1,2,3)
for (i in 1:length(n)){
theta_xc=rbind(theta_xc, theta_xc)
}
theta_xc
theta_xc=simul$theta_xc
theta_xc
for (i in 1:length(n)){
theta_xc=rbind(theta_xc, theta_xc[1,])
}
# if (sum(pk) != length(theta_xc)) {
#   # warning("Arguments 'pk' and 'theta_xc' are not compatible. Argument 'pk' has been set to length('theta_xc').")
#   # No warning as pk is provided by default
# }
tmp_theta_xc=theta_xc
for (i in 1:length(n)){
theta_xc=rbind(theta_xc, tmp_theta_xc)
}
theta_xc
tmp_theta_xc=theta_xc
theta_xc=NULL
for (i in 1:length(n)){
theta_xc=rbind(theta_xc, tmp_theta_xc)
}
theta_xc
theta_xc=simul$theta_xc
# if (sum(pk) != length(theta_xc)) {
#   # warning("Arguments 'pk' and 'theta_xc' are not compatible. Argument 'pk' has been set to length('theta_xc').")
#   # No warning as pk is provided by default
# }
tmp_theta_xc=theta_xc
theta_xc=NULL
for (i in 1:length(n)){
theta_xc=rbind(theta_xc, tmp_theta_xc)
}
theta_xc
rownames(theta_xc)=paste0("cluster", 1:nrow(theta_xc))
theta_xc
theta_xc=simul$theta_xc
inherits(theta_xc, "numeric") | ((inherits(theta_xc, "matrix")&nrow(theta_xc)==1))
((inherits(theta_xc, "matrix")&nrow(theta_xc)==1))
inherits(theta_xc, "matrix")
inherits(theta_xc, "numeric")
if (inherits(theta_xc, "numeric")){
theta_xc=rbind(theta_xc)
}
(inherits(theta_xc, "matrix")&nrow(theta_xc)==1)
nrow(theta_xc)==1
theta_xc
if (inherits(theta_xc, "numeric")){
theta_xc=rbind(theta_xc)
}
if (nrow(theta_xc)==1){
tmp_theta_xc=theta_xc
theta_xc=NULL
for (i in 1:length(n)){
theta_xc=rbind(theta_xc, tmp_theta_xc)
}
}
theta_xc
rownames(theta_xc)=paste0("cluster", 1:nrow(theta_xc))
pk <- ncol(theta_xc)
pk
theta_xc
load_all()
set.seed(1)
simul <- SimulateClustering(
n = c(10, 30, 15), ev_xc = 0.95
)
load_all()
set.seed(1)
simul <- SimulateClustering(
n = c(10, 30, 15), ev_xc = 0.95
)
Heatmap(as.matrix(dist(simul$data)))
load_all()
Heatmap(as.matrix(dist(simul$data)))
set.seed(1)
simul <- SimulateClustering(
n = c(10, 30, 15), ev_xc = 0.95
)
load_all()
set.seed(1)
simul <- SimulateClustering(
n = c(10, 30, 15), ev_xc = 0.95
)
Heatmap(as.matrix(dist(simul$data)))
Heatmap(as.matrix(dist(simul$data[,4,drop=FALSE])))
plot(simul$data[,4], col=simul$theta)
set.seed(1)
simul <- SimulateClustering(
n = c(10, 30, 15),
nu_xc=0.5,
ev_xc = 0.95
)
Heatmap(as.matrix(dist(simul$data[,4,drop=FALSE])))
Heatmap(as.matrix(dist(simul$data)))
# Data simulation
set.seed(1)
simul <- SimulateClustering(
n = c(10, 30, 15),
nu_xc=1,
ev_xc = 0.95
)
Heatmap(as.matrix(dist(simul$data)))
# Data simulation
set.seed(1)
simul <- SimulateClustering(
n = c(10, 30, 15),
nu_xc=1,
ev_xc = 0.6
)
Heatmap(as.matrix(dist(simul$data)))
Heatmap(simul$data)
pheatmap::pheatmap(simul$data)
Heatmap(simul$data)
# Example with 3 clusters
set.seed(1)
simul <- SimulateClustering(
n = c(10, 30, 15),
nu_xc=1,
ev_xc = 0.5
)
Heatmap(as.matrix(dist(simul$data)))
plot(simul)
simul$theta_xc
load_all()
set.seed(1)
simul <- SimulateClustering(
n = c(10, 30, 15), ev_xc = 0.95
)
print(simul)
plot(simul)
simul$theta_xc
load_all()
plot(simul)
set.seed(1)
simul <- SimulateClustering(
n = c(10, 30, 15),
nu_xc=1,
ev_xc = 0.5
)
print(simul)
plot(simul)
load_all()
plot(simul)
# Data simulation
set.seed(1)
simul <- SimulateClustering(
n = c(200, 100, 150), pk = 10,
theta_xc = c(1, 1, rep(0, 8))
)
print(simul)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = simul$data,
colours = c("navy", "white", "red")
)
simul$ev # marginal proportions of explained variance
simul$data
set.seed(1)
simul <- SimulateClustering(
n = c(200, 100, 150), pk = 10,
theta_xc = c(1, 1, rep(0, 8))
)
print(simul)
load_all()
# Data simulation
set.seed(1)
simul <- SimulateClustering(
n = c(200, 100, 150), pk = 10,
theta_xc = c(1, 1, rep(0, 8))
)
print(simul)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = simul$data,
colours = c("navy", "white", "red")
)
simul$ev # marginal proportions of explained variance
set.seed(1)
simul <- SimulateClustering(
n = c(200, 100, 150), pk = 10,
theta_xc = c(1, 1, rep(0, 8)),
ev_xc=0.9
)
print(simul)
# Visualisation of the data
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = simul$data,
colours = c("navy", "white", "red")
)
simul$ev # marginal proportions of explained variance
plot(simul)
set.seed(1)
simul <- SimulateClustering(
n = c(20, 10, 15), pk = 10,
theta_xc = c(1, 1, rep(0, 8)),
ev_xc=0.9
)
print(simul)
plot(simul)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = simul$data,
colours = c("navy", "white", "red")
)
simul$ev # marginal proportions of explained variance
plot(simul$data[, 1:2], col = simul$theta)
set.seed(1)
simul <- SimulateClustering(
n = c(20, 10, 15), pk = 10,
theta_xc = c(1, 1, rep(0, 8)),
ev_xc=0.8
)
print(simul)
plot(simul)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = simul$data,
colours = c("navy", "white", "red")
)
simul$ev # marginal proportions of explained variance
plot(simul$data[, 1:2], col = simul$theta)
# Data simulation
set.seed(1)
simul <- SimulateClustering(
n = c(200, 100, 150), pk = 10,
theta_xc = c(1, 1, rep(0, 8)),
ev_xc = c(0.9, 0.8, rep(0, 8))
)
## Example with different levels of separation
# Data simulation
set.seed(1)
simul <- SimulateClustering(
n = c(20, 10, 15), pk = 10,
theta_xc = c(1, 1, rep(0, 8)),
ev_xc = c(0.9, 0.7, rep(0, 8))
)
# Visualisation along contributing variables
plot(simul$data[, 1:2], col = simul$theta)
# Data simulation
set.seed(1)
simul <- SimulateClustering(
n = c(20, 10, 15), pk = 10,
theta_xc = c(1, 1, rep(0, 8)),
ev_xc = c(0.9, 0.5, rep(0, 8))
)
# Visualisation along contributing variables
plot(simul$data[, 1:2], col = simul$theta)
simul$ev
load_all()
# Data simulation
set.seed(1)
simul <- SimulateClustering(
n = c(20, 10, 15), pk = 10,
theta_xc = c(1, 1, rep(0, 8)),
ev_xc = c(0.9, 0.5, rep(0, 8))
)
simul$ev
# Visualisation of the data
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = simul$data,
colours = c("navy", "white", "red")
)
simul$ev # marginal proportions of explained variance
# Data simulation
set.seed(1)
simul <- SimulateClustering(
n = c(20, 10, 15), pk = 10,
theta_xc = c(1, 1, rep(0, 8)),
ev_xc = c(0.9, 0.5, rep(0, 8))
)
simul$ev
# Visualisation along contributing variables
plot(simul$data[, 1:2], col = simul$theta)
# Visualisation of the data
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = simul$data,
colours = c("navy", "white", "red")
)
simul$ev # marginal proportions of explained variance
plot(simul$data[, 1:2], col = simul$theta)
set.seed(1)
simul <- SimulateClustering(
n = c(20, 10, 15), pk = 10,
theta_xc = c(1, 1, rep(0, 8)),
ev_xc = c(0.99, 0.5, rep(0, 8))
)
simul$ev
plot(simul$data[, 1:2], col = simul$theta)
# Data simulation
pk <- 10
adjacency <- matrix(0, pk, pk)
adjacency[1, 2] <- adjacency[2, 1] <- 1
set.seed(1)
simul <- SimulateClustering(
n = c(200, 100, 150), pk = pk,
theta_xc = c(1, 1, rep(0, 8)),
ev_xc = c(0.9, 0.8, rep(0, 8)),
adjacency = adjacency,
pd_strategy = "min_eigenvalue",
v_within = 0.6, v_sign = -1
)
plot(simul$data[, 1:2], col = simul$theta)
# Data simulation
pk <- 10
adjacency <- matrix(0, pk, pk)
adjacency[1, 2] <- adjacency[2, 1] <- 1
set.seed(1)
simul <- SimulateClustering(
n = c(20, 10, 15), pk = pk,
theta_xc = c(1, 1, rep(0, 8)),
ev_xc = c(0.9, 0.8, rep(0, 8)),
adjacency = adjacency,
pd_strategy = "min_eigenvalue",
v_within = 0.6, v_sign = -1
)
# Visualisation along contributing variables
plot(simul$data[, 1:2], col = simul$theta)
# Data simulation
pk <- 10
adjacency <- matrix(0, pk, pk)
adjacency[1, 2] <- adjacency[2, 1] <- 1
set.seed(1)
simul <- SimulateClustering(
n = c(200, 100, 150), pk = pk,
theta_xc = c(1, 1, rep(0, 8)),
ev_xc = c(0.9, 0.8, rep(0, 8)),
adjacency = adjacency,
pd_strategy = "min_eigenvalue",
v_within = 0.6, v_sign = -1
)
# Visualisation along contributing variables
plot(simul$data[, 1:2], col = simul$theta)
# Checking marginal proportions of explained variance
mymodel <- lm(simul$data[, 1] ~ as.factor(simul$theta))
summary(mymodel)$r.squared
mymodel <- lm(simul$data[, 2] ~ as.factor(simul$theta))
summary(mymodel)$r.squared
styler::style_pkg()
document()
library(fake)
set.seed(1)
simul <- SimulateClustering(
n = c(20, 10, 15), pk = 10,
theta_xc = c(1, 1, rep(0, 8)),
ev_xc = 0.8
)
print(simul)
plot(simul)
library(fake)
document()
library(fake)
load_all()
getwd()
?SimulateGraphical
styler::style_pkg()
library(fake)
getwd()
load_all()
simul=SimulateClustering()
load_all()
simul=SimulateClustering()
simul$mu_mixture
simul$theta_xc
styler::style_pkg()
document()
styler::style_pkg()
document()
styler::style_pkg()
document()
library(fake)
x=rnorm()
x=rnorm(100)
scale(x)
xscaled=scale(x)
attr(xscaled)
attr(xscaled, "scaled:centre")
attr(xscaled, "scaled:center")
library(fake)
pwd
getwd()
